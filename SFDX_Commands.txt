  force:analytics:template:create       # add an Analytics template to your workspace
  force:apex:class:create               # create an Apex class
  force:apex:execute                    # executes anonymous Apex code
  force:apex:log:get                    # fetch debug logs
  force:apex:log:list                   # display a list of IDs and general information about debug logs
  force:apex:log:tail                   # start debug logging and display logs
  force:apex:test:report                # display test results
  force:apex:test:run                   # invoke Apex tests
  force:apex:trigger:create             # create an Apex trigger
  force:auth:device:login               # authorize an org using a device code
  force:auth:jwt:grant                  # authorize an org using the JWT flow
  force:auth:list                       # list auth connection information
  force:auth:logout                     # log out from authorized orgs
  force:auth:sfdxurl:store              # authorize an org using an SFDX auth URL
  force:auth:web:login                  # authorize an org using the web login flow
  force:cmdt:create                     # creates a new custom metadata type in the current project
  force:cmdt:field:create               # generate a custom metadata field based on the field type provided
  force:cmdt:generate                   # generates a custom metadata type and all its records for the provided sObject
  force:cmdt:record:create              # create a new record for a given custom metadata type in the current project
  force:cmdt:record:insert              # create new custom metadata type records from a CSV file
  force:community:create                # creates a community using a template
  force:community:publish               # publishes a Lightning community to make it live
  force:community:template:list         # retrieves the list of templates available in your org
  force:data:bulk:delete                # bulk delete records from a csv file
  force:data:bulk:status                # view the status of a bulk data load job or batch
  force:data:bulk:upsert                # bulk upsert records from a CSV file
  force:data:record:create              # create a record
  force:data:record:delete              # delete a record
  force:data:record:get                 # view a record
  force:data:record:update              # update a record
  force:data:soql:query                 # execute a SOQL query
  force:data:tree:export                # export data from an org into sObject tree format for force:data:tree:import consumption
  force:data:tree:import                # import data into an org using SObject Tree Save API
  force:lightning:app:create            # create a Lightning app
  force:lightning:component:create      # create a bundle for an Aura component or a Lightning web component
  force:lightning:event:create          # create a Lightning event
  force:lightning:interface:create      # create a Lightning interface
  force:lightning:lint                  # analyze (lint) Aura component code
  force:lightning:lwc:test:create       # creates a Lightning web component test file with boilerplate code inside a __tests__ directory.
  force:lightning:lwc:test:run          # invokes Lightning Web Components Jest unit tests.
  force:lightning:lwc:test:setup        # install Jest unit testing tools for Lightning Web Components.
  force:lightning:test:create           # create a Lightning test
  force:limits:api:display              # display current org’s limits
  force:mdapi:convert                   # convert metadata from the Metadata API format into the source format
  force:mdapi:deploy                    # deploy metadata to an org using Metadata API
  force:mdapi:deploy:cancel             # cancel a metadata deployment
  force:mdapi:deploy:report             # check the status of a metadata deployment
  force:mdapi:describemetadata          # display the metadata types enabled for your org
  force:mdapi:listmetadata              # display properties of metadata components of a specified type
  force:mdapi:retrieve                  # retrieve metadata from an org using Metadata API
  force:mdapi:retrieve:report           # check the status of a metadata retrieval
  force:org:clone                       # clone a sandbox org
  force:org:create                      # create a scratch or sandbox org
  force:org:delete                      # mark a scratch or sandbox org for deletion
  force:org:display                     # get org description
  force:org:list                        # list all orgs you’ve created or authenticated to
  force:org:open                        # open an org in your browser
  force:org:shape:create                # Create a scratch org configuration (shape) based on the specified source org
  force:org:shape:delete                # delete all org shapes for a target org
  force:org:shape:list                  # list all org shapes you’ve created
  force:org:snapshot:create             # snapshot a scratch org
  force:org:snapshot:delete             # delete a scratch org snapshot
  force:org:snapshot:get                # get details about a scratch org snapshot
  force:org:snapshot:list               # list scratch org snapshots
  force:org:status                      # report sandbox org creation status and authenticate to org
  force:package1:version:create         # create a first-generation package version in the release org
  force:package1:version:create:get     # retrieve the status of a package version creation request
  force:package1:version:display        # display details about a first-generation package version
  force:package1:version:list           # list package versions for the specified first-generation package or for the org
  force:package:create                  # create a package
  force:package:delete                  # delete a package
  force:package:hammertest:list         # list the statuses of running and completed ISV Hammer tests
  force:package:hammertest:report       # display the status or results of a ISV Hammer test
  force:package:hammertest:run          # run ISV Hammer
  force:package:install                 # install a package in the target org
  force:package:install:report          # retrieve the status of a package installation request
  force:package:installed:list          # list the org’s installed packages
  force:package:list                    # list all packages in the Dev Hub org
  force:package:uninstall               # uninstall a second-generation package from the target org
  force:package:uninstall:report        # retrieve status of package uninstall request
  force:package:update                  # update package details
  force:package:version:create          # create a package version
  force:package:version:create:list     # list package version creation requests
  force:package:version:create:report   # retrieve details about a package version creation request
  force:package:version:delete          # delete a package version
  force:package:version:displayancestry # display the ancestry tree for a 2GP managed package version
  force:package:version:list            # list all package versions in the Dev Hub org
  force:package:version:promote         # promote a package version to released
  force:package:version:report          # retrieve details about a package version in the Dev Hub org
  force:package:version:update          # update a package version
  force:project:create                  # create a Salesforce DX project
  force:project:upgrade                 # update project config files to the latest format
  force:schema:sobject:describe         # displays the metadata for a standard or custom object
  force:schema:sobject:list             # list all objects of a specified category
  force:source:convert                  # convert source into Metadata API format
  force:source:delete                   # delete source from your project and from a non-source-tracked org
  force:source:deploy                   # deploy source to an org
  force:source:deploy:cancel            # cancel a source deployment
  force:source:deploy:report            # check the status of a metadata deployment
  force:source:open                     # edit a Lightning Page with Lightning App Builder
  force:source:pull                     # pull source from the scratch org to the project
  force:source:push                     # push source to a scratch org from the project
  force:source:retrieve                 # retrieve source from an org
  force:source:status                   # list local changes and/or changes in a scratch org
  force:source:tracking:clear           # clear all local source tracking information
  force:source:tracking:reset           # reset local and remote source tracking
  force:user:create                     # create a user for a scratch org
  force:user:display                    # displays information about a user of a scratch org
  force:user:list                       # lists all users of a scratch org
  force:user:password:generate          # generate a password for scratch org users
  force:user:permset:assign             # assign a permission set to one or more users of an org
  force:visualforce:component:create    # create a Visualforce component
  force:visualforce:page:create         # create a Visualforce page